///  https://leetcode.com/problems/minimize-malware-spread-ii/


//Remove each infected node and count the of the malwared nodes
 
class Solution {
    private boolean[] vis; 
    private int[][] graph;

    private void dfs(int u, HashSet<Integer> comp){
        if(graph[u] == null)
            return;

        vis[u] = true;
        comp.add(u);
        for(int v=0; v<graph.length; v++){
            if(graph[u][v]==1 && !vis[v]){
                dfs(v, comp);
            }
        }
    }

    private int countMalware(int[] initial){
        int count = 0;
        this.vis = new boolean[graph.length];

        for(int i=0; i<graph.length; i++){
            if(!vis[i] && graph[i] != null){
                HashSet<Integer> comp = new HashSet<>();
                dfs(i, comp);
                
                for(int node : initial){
                    if(comp.contains(node)){
                        count += comp.size();
                        break;
                    }
                } 
            }
        }

        return count;
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        this.graph = graph;      
        
        int ans = 0; 
        int minCount = 50000;

        for(int i=0; i<initial.length; i++){
            int deletedNode = initial[i];
            var tmp = graph[deletedNode]; 
            graph[deletedNode] = null;

            int count = countMalware(initial);            
            if(count < minCount || (count == minCount && deletedNode < ans)){
                minCount = count;
                ans = deletedNode;
            }
            graph[deletedNode] = tmp;
        }

        return ans;
    }
}