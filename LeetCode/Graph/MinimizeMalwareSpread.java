///  https://leetcode.com/problems/minimize-malware-spread/

//For each 'node' in the 'initial' array
//find the component size for 'node'
//if you removed the 'node' from the initial array then you can reduce the final number of infected nodes by
    //0 if the component of 'node' is multi-infected (contains 2 or more nodes exist in the 'infected' array)
    //component size if the component of 'node' is not multi-infected
    
class Solution {
    private HashSet<Integer> infected;
    private boolean[] vis;
    private int[][] adj;
    private int componentSize = 0;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        infected = new HashSet<>();
        vis = new boolean[graph.length];
        adj = graph;

        int ans = initial[0], count = -1;
        for(int node : initial){
            infected.add(node);
            if(node < ans) ans = node;
        }

        for(int node : initial){
            if(!vis[node]){
                componentSize = 0;
                if(!isMultiInfected(node) && componentSize>count || (node<ans && componentSize==count)){
                    count = componentSize;
                    ans = node;
                }
            }
        }

        return ans;
    }

    private boolean isMultiInfected(int u){
        vis[u] = true;
        componentSize++;

        boolean ans = componentSize != 1 && infected.contains(u);

        for(int i=0; i<adj[0].length; i++){
            if(i != u && adj[u][i] == 1 && !vis[i] && isMultiInfected(i))
                ans = true;
        }

        return ans;
    }
}